from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import Command
from keyboards.send_number import create_contact_keyboard
from keyboards.create_inline_keyboard import (
    create_inline_keyboard_for_toures_with_button_go_back,
)
from states.toure_6_less import ToureStates
from utils.toures import get_next_values, get_prev_data
from utils.format_final_message import format_final_message
import random


import asyncio


from aiogram.types import ReplyKeyboardRemove

from handlers.help import cmd_help

router = Router()


@router.message(Command("application"))
async def cmd_application(message: Message, state: FSMContext):
    keyboard = await create_inline_keyboard_for_toures_with_button_go_back(
        get_next_values(0, []), "toures_application_help"
    )
    await state.set_state(ToureStates.Counting)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–ª–∞–Ω–∏—Ä—É—é—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–µ? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—É /help
@router.callback_query(ToureStates.Counting, F.data == "toures_application_help")
async def application_help(callback_query: CallbackQuery, state: FSMContext):
    await cmd_help(callback_query.message)
    await callback_query.answer("")
    await state.clear()


@router.callback_query(ToureStates.Counting)
async def counting(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data != "toure_place_back":
        data = await state.update_data(counting=callback_query.data)
    else:
        data = await state.get_data()

    await state.set_state(ToureStates.TourePlace)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = await create_inline_keyboard_for_toures_with_button_go_back(
        get_next_values(1, get_prev_data(data)), "toure_counting_back"
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        "üåç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏. –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?",
        reply_markup=keyboard,
    )
    await callback_query.answer("")


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–∞
@router.callback_query(ToureStates.TourePlace, F.data == "toure_counting_back")
async def counting_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer("–í–µ—Ä–Ω—ë–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ!")

    await state.clear()
    await cmd_application(callback_query.message, state)


@router.callback_query(ToureStates.TourePlace)
async def toure_place(callback_query: CallbackQuery, state: FSMContext):
    data = await state.update_data(toure_place=callback_query.data)
    await state.set_state(ToureStates.ToureEnd)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = await create_inline_keyboard_for_toures_with_button_go_back(
        get_next_values(2, get_prev_data(data)), "toure_place_back"
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        "üìÖ –ó–¥–æ—Ä–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—É—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )
    await callback_query.answer("")


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ç–æ—Ä–æ–π —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–∞
@router.callback_query(ToureStates.ToureEnd, F.data == "toure_place_back")
async def toure_place_back(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer("–í–µ—Ä–Ω—ë–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ!")

    current_data = await state.get_data()
    current_data.pop("toure_place", None)
    await state.set_data(current_data)

    await state.set_state(ToureStates.Counting)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    await counting(callback_query, state)


@router.callback_query(ToureStates.ToureEnd)
async def get_number(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(toure_end=callback_query.data)
    keyboard = await create_contact_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.answer(
        "üì± –û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.",
        reply_markup=keyboard,
    )
    await callback_query.answer("")
    await state.set_state(ToureStates.Contact)


import asyncio
import random


async def show_circular_progress(message: Message):
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —à—É—Ç–∫–æ–π
    first_message = await message.answer(
        "‚öôÔ∏è –°–µ–∫—É–Ω–¥–æ—á–∫—É... –ú–æ–∏ —à–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏ —É–∂–µ –∫—Ä—É—Ç—è—Ç—Å—è –≤ –ø–æ–∏—Å–∫–∞—Ö –ª—É—á—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—Å! üß†",
        reply_markup=ReplyKeyboardRemove(),
    )

    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await message.answer("üöÄ –ì–æ—Ç–æ–≤–ª—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É...")
    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
    await first_message.delete()  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏... [{'‚îà' * 10}] 0%")

    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã

    # –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    for progress in range(10, 101, 10):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 10% –∫–∞–∂–¥—ã–π —à–∞–≥
        bar = "‚ñ¨" * (progress // 10) + "‚îà" * (10 - progress // 10)
        await asyncio.sleep(
            random.uniform(0.1, 0.3)
        )  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        await loading_message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏... [{bar}] {progress}%")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    await loading_message.edit_text(
        "‚ú® –î–µ–ª–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏... –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞!"
    )
    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    return loading_message


@router.message(F.content_type == "contact", ToureStates.Contact)
async def toure_end(message: Message, state: FSMContext):
    data = await state.get_data()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await show_circular_progress(message)

    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    await asyncio.sleep(1)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await message.answer(
        "üéâ –£—Ä–∞! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! ‚ú®\n\n"
        "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å –∏–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /help ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! üòä"
    )
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_message.edit_text(
        format_final_message(message, data), parse_mode="HTML"
    )

    await state.clear()
